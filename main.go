package main

import (
	"encoding/json"
	"fmt"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
	"golang.org/x/net/context"
	"golang.org/x/net/proxy"
	"io/ioutil"
	"log"
	"net"
	"net/http"
	"net/http/cookiejar"
	"strings"
	"time"
)

var chatData = []string{"userNamesData", "string", "list"}
var userNamesData = []string{"notr1v", "LightFox"}
var roomsData = []string{"roomsData", "string", "list"}

var testData []string

//////////////////////////////////////////////////////////////////

const (
	torProxyAddr = "127.0.0.1:9050"
	dkfURL       = "http://dkforestseeaaq2dqz2uflmlsybvnq2irzn4ygyvu53oazyorednviid.onion/api/v1/chat/messages/general?json"
	//testing    = "http://dkforestseeaaq2dqz2uflmlsybvnq2irzn4ygyvu53oazyorednviid.onion/api/v1/chat/messages/Hidden_Figures?json"
	cokkieFromHeader string = "_csrf=fZHk68J35hujQaJscdWsKHNMgNNNwztO; auth-token=e76e6e88988ef26150b930561c18faa1c01d65d57a20a53687326fcc16848cbb"
)

type AutoGenerated struct {
	Messages []struct {
		UUID       string `json:"UUID"`
		Message    string `json:"Message"`
		RawMessage string `json:"RawMessage"`
		Username   string `json:"Username"`
		ToUsername string `json:"ToUsername,omitempty"`
		CreatedAt  string `json:"CreatedAt"`
	} `json:"Messages"`
}

var messageDataFromChat = AutoGenerated{}

// GetHttpClient http client that uses tor proxy
func GetHttpClient() *http.Client {
	dialer, err := proxy.SOCKS5("tcp", torProxyAddr, nil, proxy.Direct)
	if err != nil {
		panic("failed to connect to tor proxy : " + err.Error())
	}
	transport := &http.Transport{
		DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {
			return dialer.Dial(network, addr)
		},
	}
	jar, err := cookiejar.New(nil)
	if err != nil {
		panic("failed to create cookie jar : " + err.Error())
	}
	return &http.Client{Transport: transport, Jar: jar}
}

func sendMsgToChat(c *http.Client, msg string) {

	newMsg := "-----------------------------2313798381329198098766863397\r\nContent-Disposition: form-data; name=\"csrf\"\r\n\r\n8oAJ7ggjqDLCph05JBRt0stLPcfvYika\r\n-----------------------------2313798381329198098766863397\r\nContent-Disposition: form-data; name=\"message\"\r\n\r\n"
	newMsg2 := "\r\n-----------------------------2313798381329198098766863397\r\nContent-Disposition: form-data; name=\"btn_submit\"\r\n\r\nsend_message\r\n-----------------------------2313798381329198098766863397\r\nContent-Disposition: form-data; name=\"file\"; filename=\"\"\r\nContent-Type: application/octet-stream\r\n\r\n-----------------------------2313798381329198098766863397--\r\n"
	msgBody := newMsg + msg + newMsg2
	body := strings.NewReader(msgBody)
	req, err := http.NewRequest("POST", "http://dkforestseeaaq2dqz2uflmlsybvnq2irzn4ygyvu53oazyorednviid.onion/api/v1/chat/top-bar/general", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0")
	req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")
	req.Header.Set("Accept-Language", "en-US,en;q=0.5")
	req.Header.Set("Referer", "http://dkforestseeaaq2dqz2uflmlsybvnq2irzn4ygyvu53oazyorednviid.onion/api/v1/chat/top-bar/general")
	req.Header.Set("Content-Type", "multipart/form-data; boundary=---------------------------2313798381329198098766863397")
	req.Header.Set("Origin", "http://dkforestseeaaq2dqz2uflmlsybvnq2irzn4ygyvu53oazyorednviid.onion")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Cookie", cokkieFromHeader)
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("Sec-Fetch-Dest", "iframe")
	req.Header.Set("Sec-Fetch-Mode", "navigate")
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("Sec-Fetch-User", "?1")
	req.Header.Add("DKF_API_KEY", "Kw2to90pQbGENqQcBG2VNc5PyEM8Ff90")
	resp, err := c.Do(req)
	if err != nil {
		// handle err
	}
	resp.Body.Close()

}

var msg chan string

func getChat(c *http.Client) {

	for {
		time.Sleep(5 * time.Second)

		URL := dkfURL
		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()
		req, err := http.NewRequestWithContext(ctx, http.MethodGet, URL, nil)
		if err != nil {
			log.Fatalf("error creating HTTP request: %v", err)
		}

		req.Header.Add("DKF_API_KEY", "Kw2to90pQbGENqQcBG2VNc5PyEM8Ff90")
		resp, err := c.Do(req)
		if err != nil {
			log.Println(err)
			fmt.Println("Check Tor Connection ")
		}
		defer resp.Body.Close()

		by, _ := ioutil.ReadAll(resp.Body)

		data := AutoGenerated{}

		//	messagesFromChat := data
		_ = json.Unmarshal([]byte(by), &data)
		//fmt.Print("\033[H\033[2J")
		// sending data to the struct
		printToConsole(data)

		fmt.Println(string(by))
		if resp.StatusCode != http.StatusOK {
			log.Println(resp.Status)

		}

	}

}

// ///////////////////////////////////////////////////////////////////////
func makeGUI(c *http.Client) {

	myApp := app.New()
	myWindow := myApp.NewWindow("DarkForest chat")

	input := widget.NewEntry()
	input.SetPlaceHolder("Enter text...")

	HomeButton := widget.NewButton("Home", func() {
		myApp := app.New()
		HomeView := myApp.NewWindow("DarkForest chat")
		content := widget.NewLabel("text")
		HomeView.SetContent(content)
		HomeView.Show()
	})
	newsButton := widget.NewButton("News", func() {
		log.Println("tapped")
	})
	chatButton := widget.NewButton("Chat", func() {
		log.Println("tapped")
	})
	fourmButton := widget.NewButton("Forum", func() {
		log.Println("tapped")
	})
	linksButton := widget.NewButton("Links", func() {
		log.Println("tapped")
	})

	//tabPtr := container.NewAppTabs(make([]*container.TabItem, 0, 5)...)
	//tabPtr.SetTabLocation(container.TabLocationLeading)

	list := widget.NewTable(
		func() (int, int) {
			return len(testData), 1
		},
		func() fyne.CanvasObject {

			return widget.NewLabel("wide content")
		},
		func(i widget.TableCellID, o fyne.CanvasObject) {
			o.(*widget.Label).SetText(testData[i.Row])

		})

	UserList := widget.NewTable(
		func() (int, int) {
			return len(userNamesData), 1
		},
		func() fyne.CanvasObject {

			return widget.NewLabel("wide content")
		},
		func(i widget.TableCellID, o fyne.CanvasObject) {
			o.(*widget.Label).SetText(userNamesData[i.Row])

		})

	//listUser := creatTable(testData)
	//go func() {
	//	listUser.Refresh()
	//	}()

	navBarButtons := container.New(layout.NewHBoxLayout(), layout.NewSpacer(), HomeButton,
		layout.NewSpacer(), newsButton, layout.NewSpacer(), chatButton, layout.NewSpacer(),
		fourmButton, layout.NewSpacer(), linksButton, layout.NewSpacer())

	ToggleAt := widget.NewButton("Toggle @", func() {
		log.Println("tapped")
	})
	togglePm := widget.NewButton("Toggle:Pm", func() {
		log.Println("tapped")
	})
	toggleIgnore := widget.NewButton("Toggle Ignore", func() {
		log.Println("tapped")
	})
	updateReadMarker := widget.NewButton("Update Read Marker", func() {
		log.Println("tapped")
	})

	ToggleBarButtons := container.New(layout.NewHBoxLayout(), layout.NewSpacer(), ToggleAt,
		layout.NewSpacer(), togglePm, layout.NewSpacer(), toggleIgnore, layout.NewSpacer(),
		updateReadMarker, layout.NewSpacer())

	content := container.NewVBox(input, widget.NewButton("Send", func() {
		sendMsgToChat(c, input.Text)
		log.Println("Content was:", input.Text)

	}))

	navPlusChatBar := container.New(layout.NewVBoxLayout(), navBarButtons, content)
	chatView := container.NewBorder(navPlusChatBar, ToggleBarButtons, nil, UserList, list)
	//mainPage := container.New(layout.NewVBoxLayout(), navPlusChatBar, chatView)

	myWindow.SetContent(chatView)
	myWindow.ShowAndRun()

}

func creatTable(data []string) *widget.Table {

	return widget.NewTable(
		func() (int, int) {
			return len(data), len(data[0])
		},
		func() fyne.CanvasObject {
			return widget.NewLabel("wide content")
		},
		func(i widget.TableCellID, o fyne.CanvasObject) {
			o.(*widget.Label).SetText(data[i.Row])

		})

}

func main() {
	c := GetHttpClient()

	go func() {
		getChat(c)

	}()

	makeGUI(c)
	//time.Sleep(100 * time.Second)

}

func printToConsole(data AutoGenerated) {

	for i := 0; i < len(data.Messages); i++ {
		fmt.Println(" message: ", data.Messages[i].Message)
		fmt.Println("message: ", data.Messages[i].Username)
		chatString := fmt.Sprint(data.Messages[i].Username + ":" + data.Messages[i].RawMessage)
		testData = append(testData, chatString)
	}

}
